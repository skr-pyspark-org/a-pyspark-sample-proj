name: CI/CD Workflow

on:
  push:
    branches:
      - master
      - release/10.0.0
      - release/11.2.0

  pull_request:
    types:
      - opened
      - edited
      - reopened
    branch:
      - "feature/**"
      - "Feature/**"
      - "release/**"


permissions:
  id-token: write
  contents: read
  packages: write
  pull-requests: write

jobs:
  pr-opened:
    if: ${{ github.event_name == 'pull_request' && contains(fromJSON( '["opened" , "edited" ,"reopened" , "synchronize"]' ) , github.event.action) }}
    environment: dev_feature
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
      SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TOTAL_EXECUTORS: ${{ secrets.TOTAL_EXECUTORS }}
      SMARTY_RATE_LIMIT: ${{ secrets.SMARTY_RATE_LIMIT }}
      SMARTY_ENTRY_LIMIT: ${{ secrets.SMARTY_ENTRY_LIMIT }}
      ES_ENDPOINT: ${{ secrets.ES_ENDPOINT }}
      PG_USERNAME: ${{ secrets.PG_USERNAME }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PROD_PG_USERNAME : ${{ secrets.PROD_PG_USERNAME }}
      PROD_PG_HOST : ${{ secrets.PROD_PG_HOST }}
      PROD_PG_PASSWORD : ${{ secrets.PROD_PG_PASSWORD }}
      PG_JDBC_DRIVER : ${{ secrets.PG_JDBC_DRIVER }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: check commit messages
        run: |
          echo "checking commit messages.."
          format = "^(feat:|fix:|feat!:|fix!:|chore:|Merge)( .{0,100})?$"
          for commit in $(git rev-list $GITHUB_SHA); do
              message=$(git log --format=%B -n 1 $commit)
              echo $message
          done
          for commit in $(git rev-list $GITHUB_SHA); do
              message=$(git log --format=%B -n 1 $commit)
            if ! echo "$message" | grep -Eq "$format" ; then
              echo $message
              echo "commit message must start with one of the following prefixes: feat fix chore feat! fix! Merge)'"
              exit 1
          done
  synchronized-check:
    if: ${{ github.event_name == 'pull_request' && contains(fromJSON( '["synchronized"]' ) , github.event.action) }}
    environment: dev_feature
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
      SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TOTAL_EXECUTORS: ${{ secrets.TOTAL_EXECUTORS }}
      SMARTY_RATE_LIMIT: ${{ secrets.SMARTY_RATE_LIMIT }}
      SMARTY_ENTRY_LIMIT: ${{ secrets.SMARTY_ENTRY_LIMIT }}
      ES_ENDPOINT: ${{ secrets.ES_ENDPOINT }}
      PG_USERNAME: ${{ secrets.PG_USERNAME }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PROD_PG_USERNAME : ${{ secrets.PROD_PG_USERNAME }}
      PROD_PG_HOST : ${{ secrets.PROD_PG_HOST }}
      PROD_PG_PASSWORD : ${{ secrets.PROD_PG_PASSWORD }}
      PG_JDBC_DRIVER : ${{ secrets.PG_JDBC_DRIVER }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: check commit messages
        run: |
          echo "checking commit messages.."
          format = "^(feat:|fix:|feat!:|fix!:|chore:|Merge)( .{0,100})?$"
          for commit in $(git rev-list $GITHUB_SHA); do
              message=$(git log --format=%B -n 1 $commit)
              echo $message
          done
          for commit in $(git rev-list $GITHUB_SHA); do
              message=$(git log --format=%B -n 1 $commit)
            if ! echo "$message" | grep -Eq "$format" ; then
              echo $message
              echo "commit message must start with one of the following prefixes: feat fix chore feat! fix! Merge)'"
              exit 1
          done    
    

  push-master:
    if: ${{ github.event_name == 'push' &&  github.ref == 'refs/head/master' }}
    environment: dev_feature
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
      SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      TOTAL_EXECUTORS: ${{ secrets.TOTAL_EXECUTORS }}
      SMARTY_RATE_LIMIT: ${{ secrets.SMARTY_RATE_LIMIT }}
      SMARTY_ENTRY_LIMIT: ${{ secrets.SMARTY_ENTRY_LIMIT }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version : 3.10.8
      - name: Install PIP
        run: |
          python -m pip install --upgrade pip
      - name: Install dependencies
        run: |
            pip install -e ".[dev]"
      - name : Run unit test
        if : ${{ !input.skip_test }}
        run: |
          pytest we/pipeline --cov=we/pipeline

  build:
    if: ${{ github.event_name == 'push' &&  github.ref == 'refs/head/master' }}
    name: Build solution
    uses: ./.github/workflows/build.yml
    secrets:
      authToken: ${{ secrets.GH_TOKEN }}

  release:
    needs: [build]
    name: Release Solution
    uses: ./.github/workflows/release.yml
    secrets: inherit
