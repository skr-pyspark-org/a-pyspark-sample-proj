name: Resuabe save databricks secret

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: environment to save secret
      space:
          type: string
          description: space
          required: true
      secret-name:
          type: string
          description: name of secret
          required: true
      secret-vaue:
          type: string
          description: value of secret
          required: true
    secrets:
      DATABRICKS_HOST:
        required: true
      DATABRICKS_TOKEN:
        required: true
      SECRETS_VALUE:
        required: true

jobs:
  display_inputs:
    name: display inputs
    runs-on: [self-hosted , alt , us-east1 , docker_not_enabled, X64,Linux]
    steps:
      - name: Mask secret value
        run: echo " ${{ secrets.SECRET_VALUE }} " > /dev/null
      - name: display inputs
        run: |
          echo "### Databricks secret to be created" >> $GITHUB_STEP_SUMMARY
          echo "" > $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}  >> $GITHUB_STEP_SUMMARY
          echo "**space:** ${{ inputs.space }}  >> $GITHUB_STEP_SUMMARY
          echo "**secret_scope:** ${{ inputs.secret_scope }}  >> $GITHUB_STEP_SUMMARY
          echo "**secret_value:** ${{ inputs.secret_value }}  >> $GITHUB_STEP_SUMMARY

  save-secret:
    name: Save Databricks Secret
    needs: display_inputs
    runs-on: [self-hosted , alt , us-east1 , docker_not_enabled, X64,Linux]
    environment: ${{ inputs.environment }}_${{ inputs.space }}
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
    steps:
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.8
      - name: setup databricks cli
        uses: databricks/setup-cli@maon
      - name: create scope ${{ inputs.secret_scope }} in Environment ${{ inputs.environment }}
        run: |
          dbxScope=${{ inputs.secret_scope }}
          if databricks secrets list-scopes | awk '{print $1}' | tail -n -2 | grep -w -q $dbxScope; then
              summary=":white_check_mark: Scope $dbxScope already exists"
          else
              echo "Creating scope $dbxScope......."
              databricks create scope $dbxScope
              if [[ "$[[ inputs.environment }}" == "dev" ]]; then
                  echo " Granting SG-Alta-Databricks-Development-Developers ReadAccess..."
                  databricks secrets put-acl $dbxScope SG-Alta-Databricks-Development-Developers READ
              fi
              summary=":white_check_mark: Created Scope $dbxScope"
          fi
          echo $summary
          echo $summary >> $GITHUB_STEP_SUMMARY
      - name: Save secret ${{ inputs.secret_scope }} in scope ${{ inputs.secre_scope }} in Environment ${{ inputs.environment }}
        run: |
          databricks secret put-secret ${{ inputs.secret_scope }} ${{ inputs.secret_name }} --string-value ${{ secrets.SECRETS_VALUE }}
          echo ":white_check_mark: Saved secret ${{ inputs.secret_name }}  " >> $GITHUB_STEP_SUMMARY
          
          
          
          




